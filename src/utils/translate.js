// --- √âmojis pour chaque type (fallback visuel)
const typeEmojis = {
  fire: 'üî•', water: 'üíß', grass: 'üåø', electric: '‚ö°',
  normal: '‚≠ê', bug: 'üêõ', poison: '‚ò†Ô∏è', ground: 'üåç',
  flying: 'üïäÔ∏è', psychic: 'üîÆ', rock: '‚õ∞Ô∏è', ghost: 'üëª',
  ice: '‚ùÑÔ∏è', dragon: 'üêâ', dark: 'üåë', steel: '‚öôÔ∏è',
  fairy: '‚ú®', fighting: 'ü•ä',
};

// --- Cache des noms FR d√©j√† traduits
const nameCache = {};

// --- Fonction asynchrone pour r√©cup√©rer le nom FR d‚Äôun Pok√©mon
export async function fetchFrenchName(name) {
  const key = name.toLowerCase();
  if (nameCache[key]) return nameCache[key];

  try {
    const response = await fetch(`https://pokeapi.co/api/v2/pokemon-species/${key}`);
    const data = await response.json();
    const frName = data.names.find(n => n.language.name === 'fr')?.name || name;
    nameCache[key] = frName;
    return frName;
  } catch (err) {
    console.error(`Erreur de traduction pour ${name}:`, err);
    return name;
  }
}

// --- R√©cup√®re un emoji pour un type (si SVG manquant)
export function getTypeEmoji(type) {
  return typeEmojis[type?.toLowerCase()] || '‚ùì';
}

// --- Renvoie le chemin de l'ic√¥ne SVG pour un type donn√©
export function getTypeIcon(type) {
  if (!type) return null;
  const filename = type.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, '');
  return `/icons/types/${filename}.svg`;
}